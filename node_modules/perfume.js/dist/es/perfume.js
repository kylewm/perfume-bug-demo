/*!
 * Perfume.js v5.3.0 (http://zizzamia.github.io/perfume)
 * Copyright 2020 Leonardo Zizzamia (https://github.com/Zizzamia/perfume.js/graphs/contributors)
 * Licensed under MIT (https://github.com/Zizzamia/perfume.js/blob/master/LICENSE)
 * @license
 */
import { config } from './config';
import { D, W, WN, WP } from './constants';
import { getNavigationTiming } from './getNavigationTiming';
import { getNetworkInformation } from './getNetworkInformation';
import { isPerformanceSupported } from './isSupported';
import { logData } from './log';
import { performanceMeasure } from './measure';
import { metrics } from './metrics';
import { disconnectPerfObserversHidden, initPerformanceObserver, } from './observe';
import { didVisibilityChange, visibility } from './onVisibilityChange';
import { reportStorageEstimate } from './storageEstimate';
import { roundByTwo } from './utils';
var Perfume = /** @class */ (function () {
    function Perfume(options) {
        if (options === void 0) { options = {}; }
        this.v = '5.3.0';
        // Extend default config with external options
        config.analyticsTracker = options.analyticsTracker;
        config.isResourceTiming = !!options.resourceTiming;
        config.isElementTiming = !!options.elementTiming;
        config.maxTime = options.maxMeasureTime || config.maxTime;
        // Exit from Perfume when basic Web Performance APIs aren't supported
        if (!isPerformanceSupported()) {
            return;
        }
        // Checks if use Performance or the EmulatedPerformance instance
        if ('PerformanceObserver' in W) {
            initPerformanceObserver();
        }
        // Init visibilitychange listener
        if (typeof D.hidden !== 'undefined') {
            // Opera 12.10 and Firefox 18 and later support
            D.addEventListener('visibilitychange', didVisibilityChange.bind(this, disconnectPerfObserversHidden));
        }
        // Log Navigation Timing
        logData('navigationTiming', getNavigationTiming());
        // Log Network Information
        logData('networkInformation', getNetworkInformation());
        // Let's estimate our storage capacity
        if (WN && WN.storage && typeof WN.storage.estimate === 'function') {
            WN.storage.estimate().then(reportStorageEstimate);
        }
    }
    /**
     * Start performance measurement
     */
    Perfume.prototype.start = function (markName) {
        if (!isPerformanceSupported() || metrics[markName]) {
            return;
        }
        metrics[markName] = true;
        // Creates a timestamp in the browser's performance entry buffer
        WP.mark("mark_" + markName + "_start");
        // Reset hidden value
        visibility.isHidden = false;
    };
    /**
     * End performance measurement
     */
    Perfume.prototype.end = function (markName, customProperties) {
        if (customProperties === void 0) { customProperties = {}; }
        if (!isPerformanceSupported() || !metrics[markName]) {
            return;
        }
        // End Performance Mark
        WP.mark("mark_" + markName + "_end");
        delete metrics[markName];
        logData(markName, roundByTwo(performanceMeasure(markName)), customProperties);
    };
    /**
     * End performance measurement after first paint from the beging of it
     */
    Perfume.prototype.endPaint = function (markName, customProperties) {
        var _this = this;
        setTimeout(function () {
            _this.end(markName, customProperties);
        });
    };
    /**
     * Removes the named mark from the browser's performance entry buffer.
     */
    Perfume.prototype.clear = function (markName) {
        delete metrics[markName];
        // Mobile Safari v13 and UC Browser v11
        // don't support clearMarks yet
        if (!WP.clearMarks) {
            return;
        }
        WP.clearMarks("mark_" + markName + "_start");
        WP.clearMarks("mark_" + markName + "_end");
    };
    return Perfume;
}());
export default Perfume;
//# sourceMappingURL=perfume.js.map