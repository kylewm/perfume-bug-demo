"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*!
 * Perfume.js v5.3.0 (http://zizzamia.github.io/perfume)
 * Copyright 2020 Leonardo Zizzamia (https://github.com/Zizzamia/perfume.js/graphs/contributors)
 * Licensed under MIT (https://github.com/Zizzamia/perfume.js/blob/master/LICENSE)
 * @license
 */
var config_1 = require("./config");
var constants_1 = require("./constants");
var getNavigationTiming_1 = require("./getNavigationTiming");
var getNetworkInformation_1 = require("./getNetworkInformation");
var isSupported_1 = require("./isSupported");
var log_1 = require("./log");
var measure_1 = require("./measure");
var metrics_1 = require("./metrics");
var observe_1 = require("./observe");
var onVisibilityChange_1 = require("./onVisibilityChange");
var storageEstimate_1 = require("./storageEstimate");
var utils_1 = require("./utils");
var Perfume = /** @class */ (function () {
    function Perfume(options) {
        if (options === void 0) { options = {}; }
        this.v = '5.3.0';
        // Extend default config with external options
        config_1.config.analyticsTracker = options.analyticsTracker;
        config_1.config.isResourceTiming = !!options.resourceTiming;
        config_1.config.isElementTiming = !!options.elementTiming;
        config_1.config.maxTime = options.maxMeasureTime || config_1.config.maxTime;
        // Exit from Perfume when basic Web Performance APIs aren't supported
        if (!isSupported_1.isPerformanceSupported()) {
            return;
        }
        // Checks if use Performance or the EmulatedPerformance instance
        if ('PerformanceObserver' in constants_1.W) {
            observe_1.initPerformanceObserver();
        }
        // Init visibilitychange listener
        if (typeof constants_1.D.hidden !== 'undefined') {
            // Opera 12.10 and Firefox 18 and later support
            constants_1.D.addEventListener('visibilitychange', onVisibilityChange_1.didVisibilityChange.bind(this, observe_1.disconnectPerfObserversHidden));
        }
        // Log Navigation Timing
        log_1.logData('navigationTiming', getNavigationTiming_1.getNavigationTiming());
        // Log Network Information
        log_1.logData('networkInformation', getNetworkInformation_1.getNetworkInformation());
        // Let's estimate our storage capacity
        if (constants_1.WN && constants_1.WN.storage && typeof constants_1.WN.storage.estimate === 'function') {
            constants_1.WN.storage.estimate().then(storageEstimate_1.reportStorageEstimate);
        }
    }
    /**
     * Start performance measurement
     */
    Perfume.prototype.start = function (markName) {
        if (!isSupported_1.isPerformanceSupported() || metrics_1.metrics[markName]) {
            return;
        }
        metrics_1.metrics[markName] = true;
        // Creates a timestamp in the browser's performance entry buffer
        constants_1.WP.mark("mark_" + markName + "_start");
        // Reset hidden value
        onVisibilityChange_1.visibility.isHidden = false;
    };
    /**
     * End performance measurement
     */
    Perfume.prototype.end = function (markName, customProperties) {
        if (customProperties === void 0) { customProperties = {}; }
        if (!isSupported_1.isPerformanceSupported() || !metrics_1.metrics[markName]) {
            return;
        }
        // End Performance Mark
        constants_1.WP.mark("mark_" + markName + "_end");
        delete metrics_1.metrics[markName];
        log_1.logData(markName, utils_1.roundByTwo(measure_1.performanceMeasure(markName)), customProperties);
    };
    /**
     * End performance measurement after first paint from the beging of it
     */
    Perfume.prototype.endPaint = function (markName, customProperties) {
        var _this = this;
        setTimeout(function () {
            _this.end(markName, customProperties);
        });
    };
    /**
     * Removes the named mark from the browser's performance entry buffer.
     */
    Perfume.prototype.clear = function (markName) {
        delete metrics_1.metrics[markName];
        // Mobile Safari v13 and UC Browser v11
        // don't support clearMarks yet
        if (!constants_1.WP.clearMarks) {
            return;
        }
        constants_1.WP.clearMarks("mark_" + markName + "_start");
        constants_1.WP.clearMarks("mark_" + markName + "_end");
    };
    return Perfume;
}());
exports.default = Perfume;
//# sourceMappingURL=perfume.js.map