"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./config");
var cumulativeLayoutShift_1 = require("./cumulativeLayoutShift");
var firstInput_1 = require("./firstInput");
var log_1 = require("./log");
var metrics_1 = require("./metrics");
var observeInstances_1 = require("./observeInstances");
var paint_1 = require("./paint");
var performanceObserver_1 = require("./performanceObserver");
var resourceTiming_1 = require("./resourceTiming");
exports.initPerformanceObserver = function () {
    observeInstances_1.perfObservers[0] = performanceObserver_1.po('paint', paint_1.initFirstPaint);
    // FID needs to be initialized as soon as Perfume is available
    // DataConsumption resolves after FID is triggered
    observeInstances_1.perfObservers[1] = performanceObserver_1.po('first-input', firstInput_1.initFirstInputDelay);
    observeInstances_1.perfObservers[2] = performanceObserver_1.po('largest-contentful-paint', paint_1.initLargestContentfulPaint);
    // Collects KB information related to resources on the page
    if (config_1.config.isResourceTiming) {
        performanceObserver_1.po('resource', resourceTiming_1.initResourceTiming);
    }
    observeInstances_1.perfObservers[3] = performanceObserver_1.po('layout-shift', cumulativeLayoutShift_1.initLayoutShift);
    if (config_1.config.isElementTiming) {
        performanceObserver_1.po('element', paint_1.initElementTiming);
    }
};
exports.disconnectPerfObserversHidden = function () {
    if (observeInstances_1.perfObservers[2]) {
        log_1.logMetric(metrics_1.lcp.value, "lcpFinal");
        performanceObserver_1.poDisconnect(2);
    }
    if (observeInstances_1.perfObservers[3]) {
        if (typeof observeInstances_1.perfObservers[3].takeRecords === 'function') {
            observeInstances_1.perfObservers[3].takeRecords();
        }
        log_1.logMetric(metrics_1.cls.value, "clsFinal");
        performanceObserver_1.poDisconnect(3);
    }
    if (observeInstances_1.perfObservers[4]) {
        log_1.logMetric(metrics_1.tbt.value, "tbtFinal");
        performanceObserver_1.poDisconnect(4);
    }
};
//# sourceMappingURL=observe.js.map