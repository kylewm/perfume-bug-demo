"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("./log");
var metrics_1 = require("./metrics");
var observeInstances_1 = require("./observeInstances");
var performanceObserver_1 = require("./performanceObserver");
exports.initFirstInputDelay = function (performanceEntries) {
    var lastEntry = performanceEntries.pop();
    if (lastEntry) {
        // Core Web Vitals FID logic
        // Measure the delay to begin processing the first input event
        log_1.logMetric(lastEntry.processingStart - lastEntry.startTime, 'fidVitals', {
            performanceEntry: lastEntry
        });
        // Legacy FID logic
        // Measure the duration of processing the first input event
        log_1.logMetric(lastEntry.duration, 'fid', {
            performanceEntry: lastEntry
        });
    }
    // Disconnect this observer since callback is only triggered once
    performanceObserver_1.poDisconnect(1);
    log_1.logMetric(metrics_1.lcp.value, 'lcp');
    if (observeInstances_1.perfObservers[3] && typeof observeInstances_1.perfObservers[3].takeRecords === 'function') {
        observeInstances_1.perfObservers[3].takeRecords();
    }
    log_1.logMetric(metrics_1.cls.value, 'cls');
    log_1.logMetric(metrics_1.tbt.value, 'tbt');
    // TBT with 5 second delay after FID
    setTimeout(function () {
        log_1.logMetric(metrics_1.tbt.value, "tbt5S");
    }, 5000);
    // TBT with 10 second delay after FID
    setTimeout(function () {
        log_1.logMetric(metrics_1.tbt.value, "tbt10S");
        log_1.logData('dataConsumption', metrics_1.rt.value);
    }, 10000);
};
//# sourceMappingURL=firstInput.js.map